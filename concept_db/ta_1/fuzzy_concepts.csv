"('fpu implementation', 'fraction calculation', 'underflow exception', 'fraction normalization')","[['fpu implementation', 'fraction calculation', 'underflow exception', 'fraction normalization']]"
"('single-precision numbers:', 'clock cycles,')","[['single-precision numbers:', 'clock cycles,']]"
"('expa fracg',)",[['expa fracg']]
"('ta0 physical organization', 'ta0 physical', '[ depiction')","[['ta0 physical organization', 'ta0 physical', '[ depiction']]"
"('invalid iv =',)",[['invalid iv =']]
"('fpu architecture', 'expb expl =', 'expb expl')","[['fpu architecture', 'expb expl', 'expb expl =']]"
"('isi fpu design', 'isi fpu')","[['isi fpu design', 'isi fpu']]"
"('produce nan,', 'whole family', 'unique nan,')","[['whole family', 'produce nan,', 'unique nan,']]"
"('operand selection', 'ieee arithmetic,', 'status flag', 'amount calculation', 'exception condition')","[['ieee arithmetic,', 'status flag', 'operand selection', 'amount calculation'], ['ieee arithmetic,', 'status flag', 'exception condition'], ['amount calculation', 'operand selection', 'status flag', 'exception condition']]"
"('exponent adjustment',)",[['exponent adjustment']]
"('expg expl = expa', 'set rsa', 'expg expl =')","[['set rsa', 'expg expl = expa', 'expg expl =']]"
"('fraca expz = expa', 'fraca expz =')","[['fraca expz = expa', 'fraca expz =']]"
"('= ~signa',)",[['= ~signa']]
"('calculate qtb',)",[['calculate qtb']]
"('approximate representation',)",[['approximate representation']]
"('required datapath:', 'underflow ud =')","[['required datapath:', 'underflow ud =']]"
"('exception generator,', 'normvhwuhvxowwr when', 'status checker,', 'sticky-bit generator', 'leading-zero detector,', 'stage controllers,', 'sticky-bit generators,')","[['exception generator,', 'normvhwuhvxowwr when', 'status checker,'], ['exception generator,', 'normvhwuhvxowwr when', 'sticky-bit generator'], ['exception generator,', 'normvhwuhvxowwr when', 'stage controllers,'], ['exception generator,', 'normvhwuhvxowwr when', 'sticky-bit generators,'], ['status checker,', 'normvhwuhvxowwr when', 'sticky-bit generator'], ['status checker,', 'normvhwuhvxowwr when', 'stage controllers,'], ['status checker,', 'normvhwuhvxowwr when', 'sticky-bit generators,'], ['sticky-bit generator', 'normvhwuhvxowwr when', 'stage controllers,'], ['sticky-bit generator', 'normvhwuhvxowwr when', 'sticky-bit generators,'], ['stage controllers,', 'normvhwuhvxowwr when', 'sticky-bit generators,']]"
"('pipeline fashion',)",[['pipeline fashion']]
"('zero d0 =',)",[['zero d0 =']]
"('right-shift amount', 'expg expl', '= frac=', 'fraca expz')","[['right-shift amount', 'expg expl', '= frac=', 'fraca expz']]"
"('division process',)",[['division process']]
"('op_div op_div op_div', 'op_div op_div op_div op_div', 'op_div op_div')","[['op_div op_div op_div op_div', 'op_div op_div op_div', 'op_div op_div']]"
"('clock cycle',)",[['clock cycle']]
"('absolute value/negation',)",[['absolute value/negation']]
"('raise exceptions,',)","[['raise exceptions,']]"
"('division operation,',)","[['division operation,']]"
"('divisor b', '|emin| emax', 'lookup table', 'complement method,')","[['divisor b', '|emin| emax', 'complement method,', 'lookup table']]"
"('sc required', 'sc required datapath:', '+ sc+')","[['sc required', '+ sc+', 'sc required datapath:']]"
"('pipeline scheduling,', 'set leading-zero', 'expansion algorithm', 'shift amount', 'expa expl=', 'fraction multiplication')","[['pipeline scheduling,', 'expansion algorithm', 'set leading-zero', 'fraction multiplication', 'expa expl=', 'shift amount']]"
"('get ulp',)",[['get ulp']]
"('alignment right-shift',)",[['alignment right-shift']]
"('zero d0', 'zero d0 = zkhq1rupvhwuhvxowwr')","[['zero d0', 'zero d0 = zkhq1rupvhwuhvxowwr']]"
"('hardware structure',)",[['hardware structure']]
"('ieee754 inexact', 'correct inexact', 'performance hardware', 'software support', 'inexact exceptions,', 'ieee-754 compatibility')","[['ieee754 inexact', 'software support', 'correct inexact'], ['ieee754 inexact', 'software support', 'performance hardware'], ['ieee754 inexact', 'software support', 'inexact exceptions,'], ['ieee754 inexact', 'software support', 'ieee-754 compatibility'], ['correct inexact', 'software support', 'performance hardware'], ['correct inexact', 'software support', 'inexact exceptions,'], ['correct inexact', 'software support', 'ieee-754 compatibility'], ['performance hardware', 'software support', 'inexact exceptions,'], ['performance hardware', 'software support', 'ieee-754 compatibility'], ['inexact exceptions,', 'software support', 'ieee-754 compatibility']]"
"('div div add sub', 'div div', 'add sub', 'div add sub', 'div div div', 'mul div div', 'div div add', 'div add', 'div div div add', 'mul div', 'mul div div div')","[['div div add sub', 'div div', 'mul div div', 'add sub', 'div div add', 'mul div', 'div add sub'], ['div div add sub', 'div div', 'mul div div', 'div add'], ['div div add sub', 'div div', 'mul div div', 'add sub', 'div div div', 'div div div add'], ['div div add sub', 'div div', 'mul div div', 'mul div div div'], ['div add sub', 'mul div', 'div div add', 'add sub', 'mul div div', 'div add'], ['div add sub', 'mul div', 'div div add', 'add sub', 'div div div', 'div div div add'], ['div add sub', 'mul div', 'div div add', 'add sub', 'mul div div', 'mul div div div'], ['div add', 'mul div div', 'add sub', 'div div div', 'div div div add'], ['div add', 'mul div div', 'mul div div div'], ['div div div add', 'div div div', 'add sub', 'mul div div', 'mul div div div']]"
"('result formatter,', 'operand status', 'operand formatters,')","[['result formatter,', 'operand status', 'operand formatters,']]"
"('sign bit calculation', 'exponent computation:')","[['sign bit calculation', 'exponent computation:']]"
"('sign bit', 'pipeline diagram', 'pipeline registers,', 'distinct zeros,', 'bit calculation', 'x fraction')","[['pipeline diagram', 'x fraction', 'distinct zeros,'], ['pipeline diagram', 'x fraction', 'pipeline registers,', 'sign bit', 'bit calculation'], ['distinct zeros,', 'x fraction', 'pipeline registers,', 'sign bit', 'bit calculation']]"
"('calculate bx bx =', 'bx bx =', 'calculate bx')","[['bx bx =', 'calculate bx bx =', 'calculate bx']]"
"('inexact exception', 'clock signal')","[['inexact exception', 'clock signal']]"
"('yba u|', 'exponent computation', 'qa yba', 'underflow occurs,', 'exponent caculation')","[['yba u|', 'underflow occurs,', 'qa yba'], ['yba u|', 'underflow occurs,', 'exponent caculation'], ['qa yba', 'underflow occurs,', 'exponent caculation']]"
"('rom access',)",[['rom access']]
"('underflow exception flag',)",[['underflow exception flag']]
"('fraca x sc =', 'fraca x', 'bx ax =')","[['fraca x', 'fraca x sc =', 'bx ax =']]"
"('linear pipeline',)",[['linear pipeline']]
"('xvh hlwkhu vljqpdjqlwxgh', 'hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw xvh', 'qrw xvh hlwkhu vljqpdjqlwxgh', 'phwkrg ru', 'xvh hlwkhu', 'grhv qrw xvh', 'qrw xvh', 'vljqpdjqlwxgh phwkrg ru wzrv', 'lwv vljq', 'qrw xvh hlwkhu', 'hlwkhu vljqpdjqlwxgh phwkrg', 'grhv qrw', 'vljqpdjqlwxgh phwkrg ru', 'vwdqgdug grhv qrw', 'hlwkhu vljqpdjqlwxgh phwkrg ru', 'vwdqgdug grhv', 'phwkrg ru wzrv', 'ru wzrv', 'grhv qrw xvh hlwkhu', 'vljqpdjqlwxgh phwkrg', 'xvh hlwkhu vljqpdjqlwxgh phwkrg')","[['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'vwdqgdug grhv qrw xvh'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'qrw xvh hlwkhu', 'qrw xvh hlwkhu vljqpdjqlwxgh'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'phwkrg ru'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'qrw xvh'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'vljqpdjqlwxgh phwkrg ru', 'vljqpdjqlwxgh phwkrg ru wzrv'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'grhv qrw'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['hlwkhu vljqpdjqlwxgh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'qrw xvh hlwkhu', 'qrw xvh hlwkhu vljqpdjqlwxgh'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'phwkrg ru'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'qrw xvh'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'vljqpdjqlwxgh phwkrg ru', 'vljqpdjqlwxgh phwkrg ru wzrv'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'grhv qrw'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['vwdqgdug grhv qrw xvh', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'phwkrg ru'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'qrw xvh'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'vljqpdjqlwxgh phwkrg ru', 'vljqpdjqlwxgh phwkrg ru wzrv'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'grhv qrw'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['qrw xvh hlwkhu vljqpdjqlwxgh', 'qrw xvh hlwkhu', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'qrw xvh'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'vljqpdjqlwxgh phwkrg ru', 'vljqpdjqlwxgh phwkrg ru wzrv'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'grhv qrw'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['phwkrg ru', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['qrw xvh', 'phwkrg ru wzrv', 'lwv vljq', 'vljqpdjqlwxgh phwkrg ru', 'vljqpdjqlwxgh phwkrg ru wzrv'], ['qrw xvh', 'phwkrg ru wzrv', 'grhv qrw'], ['qrw xvh', 'phwkrg ru wzrv', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['qrw xvh', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['qrw xvh', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['qrw xvh', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['qrw xvh', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'phwkrg ru wzrv', 'grhv qrw'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['vljqpdjqlwxgh phwkrg ru wzrv', 'vljqpdjqlwxgh phwkrg ru', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['grhv qrw', 'phwkrg ru wzrv', 'lwv vljq', 'hlwkhu vljqpdjqlwxgh phwkrg', 'hlwkhu vljqpdjqlwxgh phwkrg ru'], ['grhv qrw', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['grhv qrw', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['grhv qrw', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['grhv qrw', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['hlwkhu vljqpdjqlwxgh phwkrg ru', 'hlwkhu vljqpdjqlwxgh phwkrg', 'lwv vljq', 'phwkrg ru wzrv', 'vwdqgdug grhv'], ['hlwkhu vljqpdjqlwxgh phwkrg ru', 'hlwkhu vljqpdjqlwxgh phwkrg', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['hlwkhu vljqpdjqlwxgh phwkrg ru', 'hlwkhu vljqpdjqlwxgh phwkrg', 'lwv vljq', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['hlwkhu vljqpdjqlwxgh phwkrg ru', 'hlwkhu vljqpdjqlwxgh phwkrg', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['vwdqgdug grhv', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'ru wzrv', 'grhv qrw xvh', 'grhv qrw xvh hlwkhu'], ['vwdqgdug grhv', 'phwkrg ru wzrv', 'xvh hlwkhu', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['vwdqgdug grhv', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['grhv qrw xvh hlwkhu', 'grhv qrw xvh', 'ru wzrv', 'vwdqgdug grhv qrw', 'vljqpdjqlwxgh phwkrg'], ['grhv qrw xvh hlwkhu', 'grhv qrw xvh', 'ru wzrv', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg'], ['vljqpdjqlwxgh phwkrg', 'vwdqgdug grhv qrw', 'xvh hlwkhu', 'phwkrg ru wzrv', 'lwv vljq', 'xvh hlwkhu vljqpdjqlwxgh', 'xvh hlwkhu vljqpdjqlwxgh phwkrg']]"
"('area efficiency,',)","[['area efficiency,']]"
"('exception flag', 'invalid exception flag', 'invalid exception')","[['exception flag', 'invalid exception flag', 'invalid exception']]"
"('word size',)",[['word size']]
"('md1 md2 md3/md2', 'md4 md2', 'md2 md3/md2 md4/md3', 'md4 md5', 'md2 md3 md4 md5', 'md3 md4', 'md1 md2 md3/md2 md4/md3', 'md2 md3 md4', 'md2 md3')","[['md4 md2', 'md1 md2 md3/md2', 'md4 md5', 'md2 md3/md2 md4/md3'], ['md4 md2', 'md1 md2 md3/md2', 'md3 md4', 'md2 md3 md4', 'md2 md3 md4 md5'], ['md4 md2', 'md1 md2 md3/md2', 'md1 md2 md3/md2 md4/md3'], ['md4 md2', 'md1 md2 md3/md2', 'md2 md3'], ['md2 md3/md2 md4/md3', 'md4 md5', 'md1 md2 md3/md2', 'md3 md4', 'md2 md3 md4', 'md2 md3 md4 md5'], ['md2 md3/md2 md4/md3', 'md4 md5', 'md1 md2 md3/md2', 'md1 md2 md3/md2 md4/md3'], ['md2 md3/md2 md4/md3', 'md4 md5', 'md1 md2 md3/md2', 'md2 md3'], ['md2 md3 md4 md5', 'md2 md3 md4', 'md3 md4', 'md1 md2 md3/md2', 'md1 md2 md3/md2 md4/md3'], ['md2 md3 md4 md5', 'md2 md3 md4', 'md3 md4', 'md1 md2 md3/md2', 'md2 md3'], ['md1 md2 md3/md2 md4/md3', 'md1 md2 md3/md2', 'md2 md3']]"
"('m2 m1', 'bu qt', 'operation a/b,', 'm2 m1 =', 'bu x', 'zero exception', 'm2 m1 = axus')","[['bu qt', 'm2 m1 =', 'zero exception', 'm2 m1', 'operation a/b,'], ['bu qt', 'm2 m1 =', 'bu x'], ['bu qt', 'm2 m1 =', 'm2 m1 = axus'], ['operation a/b,', 'm2 m1', 'zero exception', 'm2 m1 =', 'bu x'], ['operation a/b,', 'm2 m1', 'zero exception', 'm2 m1 =', 'm2 m1 = axus'], ['bu x', 'm2 m1 =', 'm2 m1 = axus']]"
"('x sc', 'x sc =', 'bx ax = fraca', 'bx ax', 'calculate ax', 'fraca x sc')","[['x sc', 'x sc =', 'bx ax = fraca', 'bx ax'], ['x sc', 'x sc =', 'bx ax = fraca', 'calculate ax'], ['x sc', 'x sc =', 'bx ax = fraca', 'fraca x sc'], ['bx ax', 'bx ax = fraca', 'calculate ax'], ['bx ax', 'bx ax = fraca', 'fraca x sc'], ['calculate ax', 'bx ax = fraca', 'fraca x sc']]"
"('overflow exception', 'operand swap')","[['overflow exception', 'operand swap']]"
"('expa expb', 'expb expz =', 'expa expb expz =')","[['expa expb', 'expa expb expz =', 'expb expz =']]"
"('extra signal,',)","[['extra signal,']]"
"('appropriate value', 'support floatto-integer', 'integer number')","[['appropriate value', 'support floatto-integer', 'integer number']]"
"('redundant bit',)",[['redundant bit']]
"('division operation',)",[['division operation']]
"('instruction issue', 'datapath components', 'major datapath', 'article architecture')","[['datapath components', 'instruction issue', 'major datapath'], ['datapath components', 'instruction issue', 'article architecture'], ['major datapath', 'instruction issue', 'article architecture']]"
"('underflow ud', 'divide_by_zero exception flag')","[['underflow ud', 'divide_by_zero exception flag']]"
"('absolute value signz =', 'absolute value', 'absolute value signz', 'value signz =', 'value signz')","[['absolute value signz =', 'value signz =', 'absolute value', 'absolute value signz'], ['absolute value signz =', 'value signz =', 'value signz'], ['absolute value signz', 'absolute value', 'value signz =', 'value signz']]"
"('bx bx', 'bx bx = fracb', 'fracb x', 'calculate bx bx')","[['bx bx', 'bx bx = fracb', 'fracb x'], ['bx bx', 'bx bx = fracb', 'calculate bx bx'], ['fracb x', 'bx bx = fracb', 'calculate bx bx']]"
"('overflow exception flag', 'reset signal')","[['overflow exception flag', 'reset signal']]"
"('division algorithm', 'e min', 'parallel hardware')","[['e min', 'division algorithm', 'parallel hardware']]"
"('md3 md4 md2 md3', 'md1 md2', 'md4 md2 md3', 'md3 md4 md5', 'md4 md2 md3 md4', 'md3 md4 md2', 'md2 md3/md2')","[['md3 md4 md2 md3', 'md3 md4 md2', 'md1 md2', 'md4 md2 md3', 'md4 md2 md3 md4'], ['md3 md4 md2 md3', 'md3 md4 md2', 'md1 md2', 'md3 md4 md5', 'md2 md3/md2'], ['md4 md2 md3 md4', 'md4 md2 md3', 'md1 md2', 'md3 md4 md5', 'md2 md3/md2']]"
"('fraction computation:',)",[['fraction computation:']]
"('expa fracg =',)",[['expa fracg =']]
"('california information',)",[['california information']]
"('taylor series', 'taylor series expansion', 'fraction divider', 'alignment shift', 'fraction division', 'nonzero fraction', 'core operation', 'complex datapath')","[['taylor series expansion', 'taylor series', 'fraction divider'], ['taylor series expansion', 'taylor series', 'alignment shift'], ['taylor series expansion', 'taylor series', 'fraction division'], ['taylor series expansion', 'taylor series', 'nonzero fraction'], ['taylor series expansion', 'taylor series', 'core operation'], ['taylor series expansion', 'taylor series', 'complex datapath'], ['fraction divider', 'taylor series', 'alignment shift'], ['fraction divider', 'taylor series', 'fraction division'], ['fraction divider', 'taylor series', 'nonzero fraction'], ['fraction divider', 'taylor series', 'core operation'], ['fraction divider', 'taylor series', 'complex datapath'], ['alignment shift', 'taylor series', 'fraction division'], ['alignment shift', 'taylor series', 'nonzero fraction'], ['alignment shift', 'taylor series', 'core operation'], ['alignment shift', 'taylor series', 'complex datapath'], ['fraction division', 'taylor series', 'nonzero fraction'], ['fraction division', 'taylor series', 'core operation'], ['fraction division', 'taylor series', 'complex datapath'], ['nonzero fraction', 'taylor series', 'core operation'], ['nonzero fraction', 'taylor series', 'complex datapath'], ['core operation', 'taylor series', 'complex datapath']]"
"('qt fracb',)",[['qt fracb']]
"('fraca fracl =', 'fraca fracl', 'expa expl = expb', 'expa expl =', 'expb fracg', 'fraca fracl = fracb', 'expb fracg = fraca', 'expa expl', 'expb fracg =')","[['fraca fracl', 'fraca fracl = fracb', 'expb fracg =', 'expa expl = expb', 'fraca fracl =', 'expb fracg = fraca', 'expb fracg'], ['fraca fracl', 'fraca fracl = fracb', 'expb fracg =', 'expa expl = expb', 'expa expl'], ['expb fracg', 'expb fracg = fraca', 'expa expl =', 'fraca fracl = fracb', 'expb fracg =', 'expa expl = expb', 'expa expl']]"
"('= u,',)","[['= u,']]"
"('sticky bit generation', 'sticky bit', 'bit generation')","[['sticky bit', 'sticky bit generation', 'bit generation']]"
"('md2 md3 md4 md2',)",[['md2 md3 md4 md2']]
"('addition/subtraction operation',)",[['addition/subtraction operation']]
"('expg leading', 'expg leading zero,')","[['expg leading', 'expg leading zero,']]"
"('lv5rxqgwrqhduhvwhyhqli wlh', 'operation exceptions,')","[['lv5rxqgwrqhduhvwhyhqli wlh', 'operation exceptions,']]"
"('support integer-',)",[['support integer-']]
"('qt qt', 'qt qt =', 'truncate q', '+ ulp')","[['qt qt =', 'qt qt', '+ ulp', 'truncate q']]"
"('hidden bit:',)",[['hidden bit:']]
"('start_div en_input', 'issue rate', 'exponent calculation', 'isi fpu implementation')","[['start_div en_input', 'exponent calculation', 'issue rate'], ['start_div en_input', 'exponent calculation', 'isi fpu implementation'], ['issue rate', 'exponent calculation', 'isi fpu implementation']]"
"('expb expz', 'expb expz = expz', 'expa expb expz')","[['expb expz', 'expb expz = expz', 'expa expb expz']]"
"('overflow underflow', 'overflow underflow overflow', 'underflow overflow', 'major datapath components')","[['overflow underflow', 'overflow underflow overflow', 'underflow overflow'], ['overflow underflow', 'overflow underflow overflow', 'major datapath components'], ['underflow overflow', 'overflow underflow overflow', 'major datapath components']]"
"('overflow ov =',)",[['overflow ov =']]
"('iv zkhq', 'invalid iv zkhq')","[['iv zkhq', 'invalid iv zkhq']]"
"('invalid iv =0', 'overflow ov', 'invalid iv')","[['overflow ov', 'invalid iv =0', 'invalid iv']]"
"('division instruction', 'exception generation')","[['division instruction', 'exception generation']]"
"('= +0,',)","[['= +0,']]"
"('ieee committee',)",[['ieee committee']]
